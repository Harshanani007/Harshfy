/*we are using single style sheet but in very complex projects we are going to split the css and then combine using css preprocessors sas or las
we use root element to represent html elements for global variables or custom properties */
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --color-border: #ccc;
  --border-radius: 30px;
}

*,
*::after,
*::before {
  box-sizing: border-box;
}
/*Typography*/
::selection {
  background: var(--color-primary);
  color: #fff;
}
html {
  /*62.5% of 16px = 10x*/
  font-size: 62.5%;
}
body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
  line-height: 1.1;
}

h1 {
  /*1 x size of the size*/
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
  font-weight: 500;
}

p {
  margin-top: 0;
}

/*after a wide analysis i come through an observation that the user agent stylesheet is assigning the properties like margin start end by itself and they are 
considering the font size of the elements to compute
margin of the element starts from the content of a html element and from taking some extra 
space after the content alternatively*/

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/*Links */
a {
  text-decoration: none; /*no underline for the links*/
}
.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  transition: 0.15s;
}

.link-arrow:hover::after {
  margin-left: 10px;
}

@media screen and (min-width: 1024px) {
  /*this is not the repeating code as there are only few lines to repeat and giving in different media
  query is best practice*/
  .link-arrow {
    font-size: 1.5rem;
  }
}

.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600px;
  padding: 0.5rem 2rem;
  white-space: nowrap;
}

/*to define a skin we use the bem block element modifier using two dashes --*/
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/*Lists*/
.list {
  list-style: none;
  padding-left: 0;
}

.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  padding-left: 3rem;
  color: var(--color-headings);
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/*icons*/
.icon {
  width: 40px;
  height: 40px;
}

.icon--small {
  width: 30px;
  height: 30px;
}

.icon--primary {
  fill: var(--color-primary);
}

.icon--white {
  fill: #fff;
}
/*here giving the single dash because it is not a skin
and using here the pixels because the icons wont change the size in all screens
and here using inline block coz when we keep the icon next to the line we dont want a line break there */
.icon-container {
  background: #f3f9f8;
  width: 64px;
  height: 64px;
  border-radius: 100%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

.icon-container--accent {
  background: var(--color-accent);
}
/*buttons*/
.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer; /*this makes the cursor to pointer on hovering*/
  font-size: 1.8rem;
  font-weight: 600;
  padding: 2rem 3rem;
  text-transform: uppercase;
  white-space: nowrap;
  text-align: center;
  margin: 1rem 0; /*1 rem margin in vertical and 0 in horizantal*/
}

.btn .icon {
  width: 2rem;
  height: 2rem;
  margin-right: 1rem;
  vertical-align: middle;
}
.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: lighten(
    primary,
    10%
  ); /*css preprocessors sas like lighten when we compile this one is replaced by actual color*/
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

.btn--streched {
  padding-left: 6rem;
  padding-right: 6rem;
}
/*here we will get wider button than screen size and text not in the center, give text allign and universal selector to the borderbox at the top*/
.btn--block {
  width: 100%;
  display: inline-block;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/*inputs*/
/*inputs*/
.input {
  padding: 1.5rem 3.5rem;
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  outline: 0;
  color: var(--color-headings);
  font-size: 2rem;
}

::placeholder {
  color: #cdcbd7; /*the placeholder color is dark and the larger than our design so we use pseudo element*/
}

/*inputgroup
#ccc this is the color we used for the inputs too so we give it to the color palette
and the border-radius too we give in the root
after two lines border and border-radius we get a weird layout so we remove border for the input element
*/
.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  display: flex;
}

.input-group .input {
  border: 0;
  flex-grow: 1;
  padding: 1.5rem 1rem;
}

.input-group .btn {
  margin: 4px;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/*cards
*/
.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3;
  overflow: hidden;
}

.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background: var(--color-primary);
  color: #fff;
}

.card--primary .badge--primary {
  background: #126de4;
}
.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}
/*plans*/
.plan {
  transition: transform 0.2s ease-out;
}
.plan__name {
  color: #fff;
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 80%;
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  display: block;
}

.plan .list__item {
  margin-bottom: 2rem;
  letter-spacing: 1px;
}

.plan--popular {
  transform: scale(1.1);
}

.plan--popular .card__header {
  position: relative;
}

.plan--popular .card__header::before {
  content: url(../images/popular.svg);
  width: 40px;
  display: inline-block;
  position: absolute; /*on setting this absolute we have to first set the parent to relative position*/
  top: -6px;
  right: 5%;
}

.plan:hover {
  transform: scale(1.05);
}

.plan--popular:hover {
  transform: scale(1.15);
}

@media screen and (min-width: 1024px) {
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }

  .plan__description {
    font-size: 1.7rem;
  }
}

/*media*/
.media {
  display: flex;
  margin-bottom: 4rem;
}

.media__title {
  margin-top: 0;
}

.media__body {
  margin: 0 2rem;
}

.media__image {
  margin-top: 1rem;
}
/*given new color to palette*/
.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
}

.quote__text::after {
  content: close-quote;
}

/* .quote .media__title {
  color: var(--color-body-darker);
}  I thought of using this but mosh said use a different class what if we dump the media component and restructure*/

.quote__author {
  font-size: 3rem;
  font-weight: 600;
  font-style: normal;
  margin-bottom: 0;
}

.quote__organization {
  color: var(--color-headings);
  opacity: 0.4;
  font-size: 2rem;
  font-style: normal;
}

.quote__line {
  position: relative;
  bottom: 10px;
}

@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2.4rem;
  }

  .quote__organization {
    font-size: 1.6rem;
  }
}

/*grids*/
.grid {
  display: grid;
}

@media screen and (min-width: 768px) {
  .grid--1x2 {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

/*testimonial*/
.testimonial {
  padding: 3rem;
  margin: 3rem;
}

.testimonial__image {
  position: relative;
}
.testimonial__image > img {
  width: 100%;
}

.testimonial__image > .icon-container {
  position: absolute;
  top: 3rem;
  right: -32px;
}

@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }

  .testimonial .quote {
    margin-left: 6rem;
  }
}

/*callouts*/
.callout {
  padding: 4rem;
  border-radius: 5px;
}

.callout--primary {
  background: var(--color-primary);
  color: #fff;
}

.callout__heading {
  color: #fff;
  margin-top: 0;
  font-size: 3rem;
}

/*we use allign self and justify self for the grid elements*/
.callout .btn {
  justify-self: center;
  align-self: center;
}

.callout__content {
  text-align: center;
}

@media screen and (min-width: 768px) {
  .callout .grid--1x2 {
    grid-template-columns: 1fr auto;
  }
  .callout__content {
    text-align: left;
  }

  .callout .btn {
    justify-self: start;
    margin: 0 2rem;
  }
}
/*collapsibles
after setting the animation to the chevron, for animating content area there is a problem we have set the display to block or none based on the
state of the collapsible unfortunately we cant apply the transition to the content so there is a trick we apply a max-height = 0 then we have overflow
so to hide the content we have to give hidden these rules are for collapsed state and for expanded we change these  */
.collapsible__header {
  display: flex;
  justify-content: space-between; /*this pushes content to the edges and add space between*/
}

.collapsible__heading {
  margin-top: 0;
  font-size: 3rem;
}

.collapsible__chevron {
  transform: rotate(-90deg);
  transition: transform 0.3s;
}

.collapsible__content {
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transition: all 0.5s;
}

.collapsible--expanded .collapsible__chevron {
  transform: rotate(0);
}

.collapsible--expanded .collapsible__content {
  max-height: 100vh; /*if we use height it takes the entire viewport*/
  opacity: 1;
}
/*blocks*/
.block {
  --padding-vertical: 6rem;
  padding: var(--padding-vertical) 2rem;
}

.block__header {
  text-align: center;
  margin-bottom: 4rem;
}

.block__heading {
  margin-top: 0;
}

.block--dark {
  background: black;
  color: #7b858b;
}

.block--dark h1,
.block--dark h2,
.block--dark h3 {
  color: #fff;
}
.block--dark .block__heading {
  color: white;
}

.block--skewed-right {
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0 90%);
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.block--skewed-left {
  clip-path: polygon(0% 0%, 100% 0%, 100% 90%, 0 100%);
  padding-bottom: calc(var(--padding-vertical) + 4rem);
}

.container {
  max-width: 1140px;
  margin: 0 auto;
}
/*navbar
in the collapsible--expanded class we gave two classes selectors*/
.nav {
  background: black;
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  padding: 0 1rem;
  align-items: center;
}

.nav__list {
  width: 100%;
  margin: 0;
}

.nav__item {
  padding: 0.5rem 2rem;
  border-bottom: 1px solid #222;
}

.nav__item > a {
  color: #d2d0db;
  transition: color 0.3s;
}

.nav__item > a:hover {
  color: #fff;
}

.nav__toggler {
  opacity: 0.5;
  transition: box-shadow 0.15s;
  cursor: pointer;
}

.nav.collapsible--expanded .nav__toggler {
  opacity: 1;
  box-shadow: 0 0 0 3px #666;
  border-radius: 5px;
}

.nav__brand {
  transform: translateY(5px);
}
@media screen and (min-width: 768px) {
  .nav__toggler {
    display: none;
  }

  .nav__list {
    width: auto;
    display: flex;
    font-size: 1.6rem;
    max-height: 100%; /*these two props in the top we set to 0 so here there is no need of collapsible--expanded as in desktop always the content needs to be visible */
    opacity: 1;
  }

  .nav__item {
    border: 0;
  }
}

/*Hero content*/

.hero__tagline {
  font-size: 2rem;
  color: #b9c3cf;
  letter-spacing: 1px;
  margin: 2rem 0 5rem;
}

.hero__image {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .hero {
    padding-top: 0;
  }
  .hero__content {
    text-align: left;
    align-self: center;
  }
}
/*plans block 
named block-plans in reverse order because we are gonna see all kinds of blocks*/
.block-plans .grid {
  gap: 8rem 4rem;
}

.block-plans .card {
  max-width: 500px;
  margin: 0 auto;
}
/*features*/
.feature {
  gap: 4rem 2rem;
  margin: 12rem 0;
}

.feature:first-of-type {
  margin-top: 6rem;
}
.feature__heading {
  margin: 1rem 0;
}

.feature__image {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .feature:nth-of-type(even) .feature__content {
    order: 2;
  }
}
/*block show case
in the media queries in block-showcase__image, width and max-width is there but they are applied to the picture
but we have to apply to the img element 
we dont apply props to the picture element we apply to the image element so that they are responsive*/
.block-showcase__image > img {
  width: 100%;
}

@media screen and (min-width: 768px) {
  .block-showcase .grid {
    grid-template-columns: 50% 50%;
  }

  .block-showcase__image {
    justify-self: end;
  }

  .block-showcase__image > img {
    width: auto;
    max-width: 700px;
  }
}
