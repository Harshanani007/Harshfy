/*we are using single style sheet but in very complex projects we are going to split the css and then combine using css preprocessors sas or las
we use root element to represent html elements for global variables or custom properties */
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
}

*,
*::after,
*::before {
  box-sizing: border-box;
}
/*Typography*/
html {
  /*62.5% of 16px = 10x*/
  font-size: 62.5%;
}
body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

h1 {
  /*1 x size of the size*/
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  margin-top: 0;
}

/*after a wide analysis i come through an observation that the user agent stylesheet is assigning the properties like margin start end by itself and they are 
considering the font size of the elements to compute
margin of the element starts from the content of a html element and from taking some extra 
space after the content alternatively*/

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/*Links */
a {
  text-decoration: none; /*no underline for the links*/
}
.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  transition: 0.15s;
}

.link-arrow:hover::after {
  margin-left: 10px;
}

@media screen and (min-width: 1024px) {
  /*this is not the repeating code as there are only few lines to repeat and giving in different media
  query is best practice*/
  .link-arrow {
    font-size: 1.5rem;
  }
}

.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600px;
  padding: 0.5rem 2rem;
  white-space: nowrap;
}

/*to define a skin we use the bem block element modifier using two dashes --*/
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/*Lists*/
.list {
  list-style: none;
  padding-left: 0;
  color: var(--color-headings);
}

.list--inline .list__item {
  display: inline-block;
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/*icons*/
.icon {
  width: 40px;
  height: 40px;
}

.icon--primary {
  fill: var(--color-primary);
}
/*here giving the single dash because it is not a skin
and using here the pixels because the icons wont change the size in all screens
and here using inline block coz when we keep the icon next to the line we dont want a line break there */
.icon-container {
  background: #f3f9f8;
  width: 64px;
  height: 64px;
  border-radius: 100%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

/*buttons*/
.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer; /*this makes the cursor to pointer on hovering*/
  font-size: 1.8rem;
  font-weight: 600;
  padding: 2rem 3rem;
  text-transform: uppercase;
  white-space: nowrap;
  text-align: center;
  margin: 1rem 0; /*1 rem margin in vertical and 0 in horizantal*/
}

.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: lighten(
    primary,
    10%
  ); /*css preprocessors sas like lighten when we compile this one is replaced by actual color*/
  background: #3a8ffd;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}
/*here we will get wider button than screen size and text not in the center, give text allign and universal selector to the borderbox at the top*/
.btn--block {
  width: 100%;
  display: inline-block;
}

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/*inputs*/
/*inputs*/
.input {
  padding: 1.5rem 3.5rem;
  border: 1px solid #ccc;
  border-radius: 30px;
  outline: 0;
  color: var(--color-headings);
  font-size: 2rem;
}

::placeholder {
  color: #cdcbd7; /*the placeholder color is dark and the larger than our design so we use pseudo element*/
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}
